"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaStructure = void 0;
const tslib_1 = require("tslib");
const mutations_1 = require("../../queries/mutations");
/** Represents an Anime or Manga. */
class MediaStructure {
    constructor(json, client) {
        if (json.errors)
            throw new Error(JSON.stringify(json.errors));
        this.info = json;
        if (client.token)
            this.client = client;
    }
    /**
     * Update an entry.\
     * **REQUIRES YOU TO BE LOGGED IN!**
     * @param entry what to update
     * @example
     * .updateEntry({ score: 80, completedAt: Date.now() });
     */
    updateEntry(entry) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!((_a = this.client) === null || _a === void 0 ? void 0 : _a.token))
                throw new Error('This feature requires you to be logged in.');
            Object.assign(entry, { mediaId: this.info.id });
            return yield this.client.utilities.APIRequest(mutations_1.UpdateEntry, entry, this.client);
        });
    }
    /**
     * Remove this from your media entries.\
     * Requires you to be logged in.
     */
    deleteEntry() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!((_a = this.client) === null || _a === void 0 ? void 0 : _a.token))
                throw new Error('This feature requires you to be logged in.');
            return yield this.client.utilities.APIRequest(mutations_1.DeleteEntry, { id: (_b = this.info.mediaListEntry) === null || _b === void 0 ? void 0 : _b.id }, this.client);
        });
    }
    /**
     * Toggle this media's favourited status.\
     * Requires you to be logged in.
     */
    favourite() {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!((_a = this.client) === null || _a === void 0 ? void 0 : _a.token))
                throw new Error('This feature requires you to be logged in.');
            let mutation = mutations_1.AnimeFavorite;
            if (this.info.format === 'MANGA')
                mutation = mutations_1.MangaFavorite;
            return yield this.client.utilities.APIRequest(mutation, { id: this.info.id }, this.client);
        });
    }
}
exports.MediaStructure = MediaStructure;
