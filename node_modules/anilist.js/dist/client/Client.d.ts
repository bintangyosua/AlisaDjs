import Utilities from './utilities';
import { PageCharactersArgs, PageMediaArgs, PageStaffArgs, PageStudiosArgs, PageUsersArgs } from '../types/types';
import { CharacterSearchResults } from '../structures/character/CharacterSearchResults';
import { CharacterStructure } from '../structures/character/CharacterStructure';
import { MediaSearchResults } from '../structures/media/MediaSearchResults';
import { MediaStructure } from '../structures/media/MediaStructure';
import { UserStructure } from '../structures/user/UserStructure';
import { UserSearchResults } from '../structures/user/UserSearchResults';
import { ViewerStructure } from '../structures/user/ViewerStructure';
import { StaffStructure } from '../structures/staff/StaffStructure';
import { StaffSearchResults } from '../structures/staff/StaffSearchResults';
import { StudioStructure } from '../structures/studio/StudioStructure';
import { StudioSearchResults } from '../structures/studio/StudioSearchResults';
/** The main anilist.js class. */
export declare class Client {
    token?: string;
    utilities: Utilities;
    /**
     * "Logs in" to AniList. Required for some features.
     * @param token API token
     */
    constructor(token?: string);
    /**
     * Gets the media with the matching ID.
     * @param id media id
     */
    getMedia(id: number): Promise<MediaStructure>;
    /**
     * Gets the media with the maching variables.
     * @param variables filter variables
     * @example
     * .searchMedia({ format: 'OVA', includedTags: ['Body Horror'] })
     */
    searchMedia(variables: PageMediaArgs): Promise<MediaSearchResults>;
    /**
     * Gets the character with the matching ID.
     * @param id character id
     */
    getCharacter(id: number): Promise<CharacterStructure>;
    /**
     * Gets the characters with the maching variables.
     * @param variables filter variables
     * @example
     * .searchCharacters({ name: 'Naruto' })
     */
    searchCharacters(variables: PageCharactersArgs): Promise<CharacterSearchResults>;
    /**
     * Gets the currently authorized user.\
     * This requires you to be logged in.
     * @example
     * .me().info.id
     */
    me(): Promise<ViewerStructure>;
    /**
     * Gets the character with the matching ID.
     * @param id character id
     */
    getUser(id: number): Promise<UserStructure>;
    /**
     * Gets the characters with the maching variables.
     * @param variables filter variables
     * @example
     * .searchCharacters({ name: 'Naruto' })
     */
    searchUsers(variables: PageUsersArgs): Promise<UserSearchResults>;
    /**
     * Gets the staff with the matching ID.
     * @param id staff id
     */
    getStaff(id: number): Promise<StaffStructure>;
    /**
     * Gets the staff with the matching variables.
     * @param variables filter variables
     */
    searchStaff(variables: PageStaffArgs): Promise<StaffSearchResults>;
    /**
     * Gets the studio with the matching ID.
     * @param id studio id
     */
    getStudio(id: number): Promise<StudioStructure>;
    /**
     * Gets the studios with the matching variables.
     * @param variables filter variables
     */
    searchStudios(variables: PageStudiosArgs): Promise<StudioSearchResults>;
}
