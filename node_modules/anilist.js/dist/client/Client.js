"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const tslib_1 = require("tslib");
const utilities_1 = tslib_1.__importDefault(require("./utilities"));
const Queries = tslib_1.__importStar(require("../queries/queries"));
const CharacterSearchResults_1 = require("../structures/character/CharacterSearchResults");
const CharacterStructure_1 = require("../structures/character/CharacterStructure");
const MediaSearchResults_1 = require("../structures/media/MediaSearchResults");
const MediaStructure_1 = require("../structures/media/MediaStructure");
const UserStructure_1 = require("../structures/user/UserStructure");
const UserSearchResults_1 = require("../structures/user/UserSearchResults");
const ViewerStructure_1 = require("../structures/user/ViewerStructure");
const StaffStructure_1 = require("../structures/staff/StaffStructure");
const StaffSearchResults_1 = require("../structures/staff/StaffSearchResults");
const StudioStructure_1 = require("../structures/studio/StudioStructure");
const StudioSearchResults_1 = require("../structures/studio/StudioSearchResults");
/** The main anilist.js class. */
class Client {
    /**
     * "Logs in" to AniList. Required for some features.
     * @param token API token
     */
    constructor(token) {
        this.utilities = new utilities_1.default();
        this.token = token;
    }
    /**
     * Gets the media with the matching ID.
     * @param id media id
     */
    getMedia(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.MediaQuery, { id }, this);
            return new MediaStructure_1.MediaStructure(json, this);
        });
    }
    /**
     * Gets the media with the maching variables.
     * @param variables filter variables
     * @example
     * .searchMedia({ format: 'OVA', includedTags: ['Body Horror'] })
     */
    searchMedia(variables) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.MediaSearchQuery, variables, this);
            return new MediaSearchResults_1.MediaSearchResults(json, this);
        });
    }
    /**
     * Gets the character with the matching ID.
     * @param id character id
     */
    getCharacter(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.CharacterQuery, { id }, this);
            return new CharacterStructure_1.CharacterStructure(json, this);
        });
    }
    /**
     * Gets the characters with the maching variables.
     * @param variables filter variables
     * @example
     * .searchCharacters({ name: 'Naruto' })
     */
    searchCharacters(variables) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.CharacterSearchQuery, variables, this);
            return new CharacterSearchResults_1.CharacterSearchResults(json, this);
        });
    }
    /**
     * Gets the currently authorized user.\
     * This requires you to be logged in.
     * @example
     * .me().info.id
     */
    me() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.ViewerQuery, {}, this);
            return new ViewerStructure_1.ViewerStructure(json, this);
        });
    }
    /**
     * Gets the character with the matching ID.
     * @param id character id
     */
    getUser(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.UserQuery, { id }, this);
            return new UserStructure_1.UserStructure(json, this);
        });
    }
    /**
     * Gets the characters with the maching variables.
     * @param variables filter variables
     * @example
     * .searchCharacters({ name: 'Naruto' })
     */
    searchUsers(variables) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.UserSearchQuery, variables, this);
            return new UserSearchResults_1.UserSearchResults(json, this);
        });
    }
    /**
     * Gets the staff with the matching ID.
     * @param id staff id
     */
    getStaff(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.StaffQuery, { id }, this);
            return new StaffStructure_1.StaffStructure(json, this);
        });
    }
    /**
     * Gets the staff with the matching variables.
     * @param variables filter variables
     */
    searchStaff(variables) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.StaffSearchQuery, variables, this);
            return new StaffSearchResults_1.StaffSearchResults(json, this);
        });
    }
    /**
     * Gets the studio with the matching ID.
     * @param id studio id
     */
    getStudio(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.StudioQuery, { id }, this);
            return new StudioStructure_1.StudioStructure(json, this);
        });
    }
    /**
     * Gets the studios with the matching variables.
     * @param variables filter variables
     */
    searchStudios(variables) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const json = yield this.utilities.APIRequest(Queries.StudioSearchQuery, variables, this);
            return new StudioSearchResults_1.StudioSearchResults(json, this);
        });
    }
}
exports.Client = Client;
